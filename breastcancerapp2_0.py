# -*- coding: utf-8 -*-
"""BreastCancerApp2.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W7dhXC1dvMTjYKtLfqTob7OuPIgZ2TCp
"""

pip install streamlit

# Clone the repository and setup the environment
!git clone https://github.com/TechSisAda/Breast_Cancer_Detect.git
!touch cancerapp.py

import os
import time
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import cv2
import streamlit as st

# Load the trained model
model = load_model('/content/breast_cancer_model.keras')
model.summary()

# Function to convert the model to TFLite format
def convert_to_tflite(keras_model, tflite_filename="small_cancer.tflite"):
    converter = tf.lite.TFLiteConverter.from_keras_model(keras_model)
    tflite_model = converter.convert()
    with open(tflite_filename, "wb") as f:
        f.write(tflite_model)
    print(f"Model saved as {tflite_filename}")

# Convert and save the model
convert_to_tflite(model, "small_cancer.tflite")

# Function to preprocess the image
def preprocess_image(image, target_size):
    image = image.resize(target_size)
    image = np.array(image)
    image = np.expand_dims(image, axis=0)
    image = image / 255.0
    return image

# Streamlit app setup
st.title("Histopathological Breast Cancer Detection")
st.write("Upload a histopathological image to detect if it is Benign or Malignant.")

# Define a function for making predictions
def predict_image(image):
    img_array = cv2.resize(image, (224, 224))  # Resize to model input size
    img_array = img_array / 255.0              # Normalize pixel values
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

    # Simulate a process to show the progress bar
    progress_bar = st.progress(0)
    for percent_complete in range(101):
        time.sleep(0.01)  # Simulate computation time
        progress_bar.progress(percent_complete)

    # Make prediction
    prediction = model.predict(img_array)
    return prediction

# Upload and process images
uploaded_file = st.file_uploader("Choose an image", type=["tif"])

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # Preprocess the image
    processed_image = preprocess_image(image, (224, 224))

    # Make predictions
    prediction = model.predict(processed_image)
    result_class = "Malignant" if prediction[0][0] > 0.6 else "Benign"
    confidence = prediction[0][0] if result_class == "Malignant" else (1 - prediction[0][0])

    # Display results
    st.subheader("Prediction Results")
    st.write(f"**Prediction:** **{result_class}**")
    st.write(f"**Confidence:** **{confidence * 100:.2f}%**")

# Save dependencies
!pip freeze > requirements.txt

# Run the Streamlit app
!streamlit run cancerapp.py