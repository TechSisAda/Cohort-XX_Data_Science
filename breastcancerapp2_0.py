# -*- coding: utf-8 -*-
"""BreastCancerApp2.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W7dhXC1dvMTjYKtLfqTob7OuPIgZ2TCp
"""


import os
import time
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import cv2
import streamlit as st


# Load the TensorFlow Lite model
interpreter = tf.lite.Interpreter(model_path="C:/Users/ADA NNONYELU/Desktop/Data_Science_Models/small_cancer.tflite")
interpreter.allocate_tensors()

# Get input and output details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# function to predict the tflite model 
def predict_tflite(processed_image):
    input_data = np.array(processed_image, dtype=np.float32)
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke() #run the inference

    output_data = interpreter.get_tensor(output_details[0]['index'])
    return output_data


# Function to preprocess the image
def preprocess_image(image, target_size=(96, 96)):
    image = image.resize(target_size)
    image = np.array(image)
    image = np.expand_dims(image, axis=0)
    image = image / 255.0
    return image

# Streamlit app setup
st.title("Histopathological Breast Cancer Detection")
st.write("Upload a histopathological image to detect if it is Benign or Malignant.")

# Upload and process images
uploaded_file = st.file_uploader("Choose an image", type=["tif"])

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_container_width=True)

    # Preprocess the image
    processed_image = preprocess_image(image, (96, 96))

    # Make predictions
    prediction = predict_tflite(processed_image)
    result_class = "Malignant" if prediction[0][0] > 0.6 else "Benign"
    confidence = prediction[0][0] if result_class == "Malignant" else (1 - prediction[0][0])

    # Display results
    st.subheader("Prediction Results")
    st.write(f"**Prediction:** **{result_class}**")
    st.write(f"**Confidence:** **{confidence * 100:.2f}%**")

# Save dependencies
# !pip freeze > requirements.txt

# Run the Streamlit app TF_ENABLE_ONEDNN_OPTS=0
# !streamlit run cancerapp.py